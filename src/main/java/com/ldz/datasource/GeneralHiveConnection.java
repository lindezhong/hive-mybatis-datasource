package com.ldz.datasource;

import java.lang.reflect.Field;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

import org.apache.hive.jdbc.HiveConnection;
import org.apache.hive.service.rpc.thrift.TCLIService;
import org.apache.hive.service.rpc.thrift.TSessionHandle;

import lombok.extern.slf4j.Slf4j;

/**
 * 通用的hive 连接
 */
@Slf4j
public class GeneralHiveConnection extends HiveConnection {

    public GeneralHiveConnection(final String uri, final Properties info) throws SQLException {
        super(uri, info);
    }

    @Override
    public Statement createStatement() throws SQLException {
        if (isClosed()) {
            throw new SQLException("Can't create Statement, connection is closed");
        }

        return new GeneralHiveStatement(this, this.getClient(), this.getSessHandle(), this.getFetchSize());
    }

    public TCLIService.Iface getClient() {
        return getField("client", TCLIService.Iface.class);
    }

    public TSessionHandle getSessHandle() {
        return getField("sessHandle", TSessionHandle.class);
    }

    public int getFetchSize() {
        return getField("fetchSize", Integer.TYPE);
    }

    public <T> T getField(String name, Class<T> fieldClazz) {
        try {
            Class<HiveConnection> clazz = HiveConnection.class;
            Field field = clazz.getDeclaredField(name);
            field.setAccessible(true);
            Object client = field.get(this);
            return (T) client;
        } catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException e) {
            log.error("get field [{}] fail", name, e);
        }
        return null;
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return new GeneralHivePreparedStatement(this, this.getClient(), this.getSessHandle(), sql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return new GeneralHivePreparedStatement(this, this.getClient(), this.getSessHandle(), sql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        return super.prepareStatement(sql, columnIndexes);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        return super.prepareStatement(sql, columnNames);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency)
            throws SQLException {
        return new GeneralHivePreparedStatement(this, this.getClient(), this.getSessHandle(), sql);
 
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency,
            int resultSetHoldability) throws SQLException {
        return super.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }


    
}